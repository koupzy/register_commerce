<?php

namespace AppBundle\Entity;

use AppBundle\Model\SystemData;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Created by PhpStorm.
 * User: koupzy
 * Date: 16/12/18
 * Time: 20:12
 * @ORM\Entity()
 * @ORM\Table()
 */
class Exploitant
{
    use SystemData;

    /**
     * @var string $nom
     * @ORM\Column(type="string")
     * @Assert\NotBlank(message="veuillez saisir ce champ")
     * @Assert\NotNull(message="ce champ est obligatoire")
     */
    private $nom;

    /**
     * @var string $prenom
     * @ORM\Column(type="string")
     * @Assert\NotBlank(message="veuillez saisir ce champ")
     * @Assert\NotNull(message="ce champ est obligatoire")
     */
    private $prenom;
    /**
     * @var string $nationalite
     * @ORM\Column(type="string")
     * @Assert\NotBlank(message="veuillez saisir ce champ")
     * @Assert\NotNull(message="ce champ est obligatoire")
     */
    private $nationalite;

    /**
     * @var Assert\Date $dateNaiss
     * @ORM\Column(type="date")
     * @Assert\NotBlank(message="veuillez saisir ce champ")
     * @Assert\NotNull(message="ce champ est obligatoire")
     *
     */
    private $dateNaiss;

    /**
     * @var string $lieuNaiss
     * @ORM\Column(type="string")
     */
    private $lieuNaiss;

    /**
     * @var string $titreSejour
     * @ORM\Column(type="string", nullable=true)
     */
    private $titreSejour;

    /**
     * @var \DateTime $dateValidite
     * @ORM\Column(type="datetime", nullable=true)
     */
    private $dateValidite;

    /**
     * @var string $domicile
     * @ORM\Column(type="string")
     * @Assert\NotBlank(message="veuillez saisir ce champ")
     * @Assert\NotNull(message="ce champ est obligatoire")
     */
    private $domicile;

    /**
     * @var string $boitePostale
     * @ORM\Column(type="string", nullable=true)
     */
    private $boitePostale;

    /**
     * @var string $situationMatri
     * @ORM\Column(type="string")
     * @Assert\NotBlank(message="veuillez saisir ce champ")
     * @Assert\NotNull(message="ce champ est obligatoire")
     */
    private $situationMatri;

    /**
     * @var array $conjoints
     * @ORM\Column(type="array")
     */
    private $conjoints;

    /**
     * @var array $antActivities
     * @ORM\Column(type="array")
     */
    private $antActivities;

    /**
     * @var Collection $activities
     * @ORM\OneToMany(targetEntity="Activity", mappedBy="exploitant")
     */
    private $activities;

    /**
     * Exploitant constructor.
     * @internal param array $conjoints
     * @internal param array $antActivities
     * @internal param Collection $activities
     */
    public function __construct( )
    {
        $this->conjoints = Array(
            'nom' => '',
            'prenom' => '',
            'dateNaiss' => null,
            'lieuNaiss' => '',
            'regimeMat' => '',
            'clauseRest' => '',
        );
        $this->antActivities = Array(
            'periode_de' => null,
            'periode_a'  => null,
            'prec_rccm'  => '',
            'activite'  => '',
            'princip_etab'  => '',
            'second_etab'  => '',
            'rccm'  => ''
        );
        $this->activities = new ArrayCollection();
        $this->dateCreat = new \DateTime('now');
        $this->dateModif = new \DateTime('now');
    }

    /**
     * @return string
     */
    public function getNom(): ?string
    {
        return $this->nom;
    }

    /**
     * @param string $nom
     */
    public function setNom(string $nom)
    {
        $this->nom = $nom;
    }

    /**
     * @return string
     */
    public function getPrenom(): ?string
    {
        return $this->prenom;
    }

    /**
     * @param string $prenom
     */
    public function setPrenom(string $prenom)
    {
        $this->prenom = $prenom;
    }

    /**
     * @return string
     */
    public function getNationalite(): ?string
    {
        return $this->nationalite;
    }

    /**
     * @param string $nationalite
     */
    public function setNationalite(string $nationalite)
    {
        $this->nationalite = $nationalite;
    }

    /**
     * @return Assert\Date
     */
    public function getDateNaiss()
    {
        return $this->dateNaiss;
    }

    /**
     * @param Assert\Date $dateNaiss
     */
    public function setDateNaiss( $dateNaiss)
    {
        $this->dateNaiss = $dateNaiss;
    }

    /**
     * @return string
     */
    public function getLieuNaiss(): ?string
    {
        return $this->lieuNaiss;
    }

    /**
     * @param string $lieuNaiss
     */
    public function setLieuNaiss(string $lieuNaiss)
    {
        $this->lieuNaiss = $lieuNaiss;
    }


    /**
     * @return string
     */
    public function getTitreSejour(): ?string
    {
        return $this->titreSejour;
    }

    /**
     * @param string $titreSejour
     */
    public function setTitreSejour(string $titreSejour)
    {
        $this->titreSejour = $titreSejour;
    }

    /**
     * @return \DateTime
     */
    public function getDateValidite(): ?\DateTime
    {
        return $this->dateValidite;
    }

    /**
     * @param \DateTime $dateValidite
     */
    public function setDateValidite( $dateValidite)
    {
        $this->dateValidite = $dateValidite;
    }

    /**
     * @return string
     */
    public function getDomicile(): ?string
    {
        return $this->domicile;
    }

    /**
     * @param string $domicile
     */
    public function setDomicile(string $domicile)
    {
        $this->domicile = $domicile;
    }

    /**
     * @return string
     */
    public function getBoitePostale(): ?string
    {
        return $this->boitePostale;
    }

    /**
     * @param string $boitePostale
     */
    public function setBoitePostale(string $boitePostale)
    {
        $this->boitePostale = $boitePostale;
    }

    /**
     * @return string
     */
    public function getSituationMatri(): ?string
    {
        return $this->situationMatri;
    }

    /**
     * @param string $situationMatri
     */
    public function setSituationMatri(string $situationMatri)
    {
        $this->situationMatri = $situationMatri;
    }

    /**
     * @return array
     */
    public function getConjoints(): array
    {
        return $this->conjoints;
    }

    /**
     * @param array $conjoints
     */
    public function setConjoints(array $conjoints)
    {
        $this->conjoints = $conjoints;
    }

    /**
     * @return array
     */
    public function getAntActivities(): array
    {
        return $this->antActivities;
    }

    /**
     * @param array $antActivities
     */
    public function setAntActivities(array $antActivities)
    {
        $this->antActivities = $antActivities;
    }

    /**
     * @return Collection
     */
    public function getActivities(): Collection
    {
        return $this->activities;
    }

    public function addActivity(Activity $activity)
    {
        if (!$this->activities->contains($activity)){
            $this->activities->add($activity);
        }
        return $this;
    }

    public function removeActivity(Activity $activity)
    {
        if ($this->activities->contains($activity)){
            $this->activities->removeElement($activity);
        }
        return $this;
    }

    /**
     * @param Collection $activities
     * @return $this
     */
    public function setActivities(Collection $activities)
    {
        $this->activities = new ArrayCollection();
        foreach ($activities as $activity){
            $this->addActivity($activity);
        }
        return $this;
    }


}